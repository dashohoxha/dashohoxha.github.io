#+TITLE:     Web Application Deployment With Docker
#+AUTHOR:    Dashamir Hoxha
#+EMAIL:     dashohoxha@gmail.com
#+DATE:      2016-10-19
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:nil LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
# #+INFOJS_OPT: view:overview toc:t ltoc:t mouse:#aadddd buttons:0 path:js/org-info.js
#+STYLE: <link rel="stylesheet" type="text/css" href="css/org-info.css" />
#+begin_export html
---
layout:     post
title:      Web Application Deployment With Docker
date:       2016-10-19
summary: Docker is an open platform for developing, shipping, and running applications.
tags: [docker]
---
#+end_export

* Installing Docker

  - Install:
    From https://docker.github.io/engine/getstarted/linux_install_help/
    #+begin_example
    curl -fsSL https://get.docker.com/ | sh
    #+end_example

  - Verify installation:
    #+begin_example
    docker version
    docker run hello-world
    #+end_example

  - Get some images from the registry:
    #+begin_example
    docker pull ubuntu:14.04
    docker pull ubuntu:16.04
    docker run ubuntu:14.04 /bin/echo 'Hello world'
    docker run ubuntu:16.04 /bin/echo 'Hello world'
    #+end_example


* Create a web application container

  - Create a new container from *ubuntu-upstart*:
    #+begin_example
    docker run -d --name=webapp --hostname=example.org \
               -p 8000:80 ubuntu-upstart:14.04
    #+end_example

  - Install apache2 and mysql inside the container:
    #+begin_example
    alias docker-webapp-exec='docker exec -it webapp env TERM=xterm'
    docker-webapp-exec bash
    apt-get update
    apt-get -y upgrade
    apt-get -y install apache2 mysql-server php5 php5-mysql
    a2enmod ssl
    a2ensite default-ssl
    service apache2 restart
    exit
    #+end_example

  - Add this line on ~/etc/hosts~.
    #+begin_example
    127.0.0.1 example.org
    #+end_example

  - Try it in browser: http://example.org:8000


* Create more web application containers

  - Save the webapp container as a new image (make a snapshot):
    #+begin_example
    docker stop webapp
    docker commit webapp lamp:v1.0
    docker images
    #+end_example

  - Create new containers from this image:
    #+begin_example
    mkdir /opt/test/
    cd /opt/test/
    mkdir -p app01
    docker run -d --name=webapp01 --hostname=example.org \
               -v $(pwd)/app01:/var/www/html \
               -p 8001:80 lamp:v1.0
    mkdir -p app02
    docker run -d --name=webapp02 --hostname=example.org \
               -v $(pwd)/app02:/var/www/html \
               -p 8002:80 lamp:v1.0
    #+end_example

  - Modify applications:
    #+begin_example
    vim app01/index.php
    vim app02/index.php
    #+end_example

  - Test them in browser:
    + http://example.org:8001
    + http://example.org:8002


* Building images

  - Create ~/opt/test/lamp/Dockerfile~ with a content like this:
    #+begin_example
    FROM ubuntu-upstart:14.04

    RUN apt-get update; apt-get -y upgrade
    RUN apt-get -y purge openssh-server openssh-client ; apt-get -y autoremove
    RUN apt-get update ; DEBIAN_FRONTEND=noninteractive apt-get -y install \
        vim apache2 mysql-server php5 php5-mysql
    RUN a2enmod ssl && \
        a2ensite default-ssl
    #+end_example

  - Build the image:
    #+begin_example
    cd /opt/test/
    docker build --tag=lamp:v1.1 lamp/
    docker images
    #+end_example

  - Rebuild and notice that the cache will be used.


* Upload image to Docker Hub

  - Register on Docker Hub: https://hub.docker.com

  - Set a tag:
    #+begin_example
    docker tag lamp:v1.1 username/lamp:v1.1
    #+end_example

  - Push to Docker Hub:
    #+begin_example
    docker login
    docker push username/lamp:v1.1
    #+end_example

  - Edit the information on:
    https://hub.docker.com/u/username/lamp/


* Using container wsproxy

  - Get the code from GitHub:
    #+begin_example
    cd /opt/test/
    git clone https://github.com/docker-build/wsproxy
    #+end_example

  - Create a workdir:
    #+begin_example
    mkdir wsproxy1
    cd wsproxy1
    ln -s ../wsproxy .
    #+end_example

  - Build the image and create a container:
    #+begin_example
    cp wsproxy/utils/config.sh .
    vim config.sh

    wsproxy/docker/build.sh
    wsproxy/docker/create.sh
    wsproxy/docker/start.sh
    #+end_example

  - Create containers of webapps:
    #+begin_example
    docker stop webapp01 webapp02
    docker rm webapp01 webapp02

    docker run -d --name=webapp01 --hostname=app01.example.org \
               -v $(pwd)/../app01:/var/www/html lamp:v1.1
    docker run -d --name=webapp02 --hostname=app02.example.org \
               -v $(pwd)/../app02:/var/www/html lamp:v1.1
    #+end_example
    Note that no HTTP ports are exposed to the host (for example using
    options =-p 80:80 -p 443:443=).

  - Add domains =app01.example.org= and =app02.example.org=:
    #+begin_example
    wsproxy/domains-add.sh webapp01 app01.example.org
    wsproxy/domains-add.sh webapp02 app02.example.org

    cat containers.txt
    cat sites-enabled/app01.example.org.conf
    cat sites-enabled/app02.example.org.conf
    #+end_example

  - Add these lines on ~/etc/hosts~:
    #+begin_example
    127.0.0.1 app01.example.org
    127.0.0.1 app02.example.org
    #+end_example

  - Try in browser:
    + http://app01.example.org
    + http://app02.example.org
    + https://app01.example.org
    + https://app02.example.org

  - Try to get a free SSL cert from letsencrypt.org:
    #+begin_example
    wsproxy/get-ssl-cert.sh info@app01.example.org app01.example.org --test
    #+end_example
    It will not work because =app01.example.org= is not a real domain
    owned by you and =info@app01.example.org= is not a real address.


* Install SchoolTool

  - Get scripts from GitHub:
    #+begin_example
    cd /opt/test/
    git clone https://github.com/docker-build/SchoolTool
    cd SchoolTool/
    #+end_example

  - Edit ~settings.sh~ and comment out the ports:
    #+begin_example
    #PORTS="-p 7080:7080 -p 80:80 -p 443:443"
    #+end_example

  - Build image, create the container, and start it:
    #+begin_example
    ./build.sh
    ./create.sh
    ./start.sh
    docker ps
    #+end_example

  - Make some configurations and install apache2:
    #+begin_example
    ./exec.sh ./config.sh
    ./exec.sh ./install-apache2.sh
    #+end_example

  - Add the domain to wsproxy:
    #+begin_example
    cd /opt/test/wsproxy1/
    wsproxy/domains-add.sh schooltool school1.example.org
    #+end_example

  - Add to ~/etc/hosts~ the line =127.0.0.1  school1.example.org=
    and try http://school1.example.org in browser.

  - Try to get a free SSL cert from letsencrypt.org:
    #+begin_example
    wsproxy/get-ssl-cert.sh info@school1.example.org school1.example.org --test
    #+end_example
    It will not work because =school1.example.org= is not a real domain
    owned by you and =info@school1.example.org= is not a real address.


* Install Moodle

  - Get scripts from GitHub:
    #+begin_example
    cd /opt/test/
    git clone https://github.com/docker-build/moodle
    #+end_example

  - Create a working directory for the container:
    #+begin_example
    mkdir moodle1
    cd moodle1/
    ln -s ../moodle .
    cp moodle/utils/settings.sh .
    #+end_example

  - Edit ~settings.sh~ and comment out the ports:
    #+begin_example
    IMAGE=moodle
    CONTAINER=moodle1
    DOMAIN="moodle1.example.org"

    MYSQL_ROOT_PASSWD=random
    DBNAME=moodle1
    DBUSER=moodle1
    DBPASS=moodle1

    #PORT_HTTP=80
    #PORT_HTTPS=443
    #PORT_SSH=2222
    #+end_example

  - Build image, create the container, and start it:
    #+begin_example
    moodle/docker/build.sh
    moodle/docker/create.sh
    moodle/docker/start.sh
    docker ps
    #+end_example

  - Configure the new container:
    #+begin_example
    moodle/config.sh
    #+end_example

  - Add the domain to wsproxy:
    #+begin_example
    cd /opt/test/wsproxy1/
    wsproxy/domains-add.sh moodle1 moodle1.example.org
    #+end_example

  - Add to ~/etc/hosts~ the line =127.0.0.1  moodle1.example.org=
    and try http://moodle1.example.org in browser.

  - Try to get a free SSL cert from letsencrypt.org:
    #+begin_example
    wsproxy/get-ssl-cert.sh info@moodle1.example.org moodle1.example.org --test
    #+end_example
    It will not work because =moodle1.example.org= is not a real domain
    owned by you and =info@moodle1.example.org= is not a real address.


* Install B-Translator Client

  See: http://info.btranslator.org/install.html

  - Get the image:
    #+begin_example
    docker search btranslator
    docker pull btranslator/btr_client:v3.0
    docker images
    #+end_example

  - Create and start a container:
    #+begin_example
    docker create --name=bcl_fr --hostname=fr.example.org btranslator/btr_client:v3.0
    docker start bcl_fr
    #+end_example

  - Add the domain to wsproxy:
    #+begin_example
    cd /opt/test/wsproxy1/
    wsproxy/domains-add.sh bcl_fr fr.example.org
    #+end_example

  - Add to ~/etc/hosts~ the line =127.0.0.1  fr.example.org=
    and open in browser https://fr.example.org .


* Installing a Drupal Application

  - See: https://github.com/dashohoxha/dbox

  - Get the code of DBox from github:
    #+begin_example
    cd /opt/test/
    git clone --branch ubuntu-14.04 https://github.com/dashohoxha/dbox.git
    #+end_example

  - Rename the project:
    #+begin_example
    dbox/rename-project.sh  # see usage
    dbox/rename-project.sh labdoo:webapp03 lbd:w03
    mv dbox webapp03
    #+end_example

  - Initialize a git repository:
    #+begin_example
    cd webapp03/
    git init .
    git add -A
    git commit -a -m 'My new project.'
    cd ..
    #+end_example

  - Build a docker image and create a container:
    #+begin_example
    mkdir webapp03-workdir
    cd webapp03-workdir/
    ln -s ../webapp03/docker .
    cp docker/settings.sh .
    vim settings.sh
    docker/build.sh settings.sh
    vim config     # comment out ports
    docker/create.sh
    docker/start.sh
    docker ps
    #+end_example

  - Add the domain to wsproxy:
    #+begin_example
    cd /opt/test/wsproxy1/
    wsproxy/domains-add.sh webapp03-master example.org
    #+end_example

  - Add to ~/etc/hosts~ the line =127.0.0.1  example.org=
    and open in browser https://example.org .
