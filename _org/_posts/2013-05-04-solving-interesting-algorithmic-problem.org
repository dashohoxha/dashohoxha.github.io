#+TITLE:     Solving an interesting algorithmic problem
#+AUTHOR:    Dashamir Hoxha
#+EMAIL:     dashohoxha@gmail.com
#+DATE:      2013-05-04
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:nil LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+begin_comment yaml-front-matter
---
layout:     post
title:      Solving an interesting algorithmic problem
date:       2013-05-04
summary:    The second problem on Google CodeJam 2013, Round 1B
    was interesting. The obvious solution of trying all the possible
    cases and combinations would not work, unless the input had very
    small limits (besides being not so easy to implement).
tags: [Algorithms, Programing, Google CodeJam, Ruby]
---
#+end_comment

The second problem on /Google CodeJam 2013, Round 1B/ was interesting:
[[https://code.google.com/codejam/contest/2418487/dashboard#s=p1&a=1][Problem B. Manage your Energy]] . The obvious solution of trying all the
possible cases and combinations would not work, unless the input had
very small limits (besides being not so easy to implement).

The solution, as described on the [[https://code.google.com/codejam/contest/2418487/dashboard#s=a&a=1][Contest Analysis]] was a /greedy
algorithm/: try to spend as much energy as possible for the activity
with the highest value, neglecting the other activities if needed;
then try to spend as much energy as possible for the activity with the
second highest values, neglecting the others if needed, and so on.

Actually, I suspected during the contest that a greedy algorithm may
be the solution, however I couldn't find a way of implementing it
properly. Even days after the contest I was not able to think of a
suitable implementation. Only after seeing the solution on the [[https://code.google.com/codejam/contest/2418487/dashboard#s=a&a=1][Contest
Analysis]] I could see how it could possibly be implemented (keeping a
pair of constraints for each value on the list, and updating them
while processing the list).

But then I saw a post on the [[https://plus.google.com/u/0/communities/108868943712030139628][CodeJam Community]], that somebody had
implemented a recursive solution, and then suddenly things became much
clear and cleaner. Usually the recursive solutions are more elegant
and more easy to understand and implement, and this is true for this
case as well.

Below is the recursive implementation that I did to solve this
problem:

#+BEGIN_EXPORT HTML
{% gist 5517373 %}
#+END_EXPORT

But there was something more interesting to this problem. Usually, the
good (fast) solution, as described on the CodeJam Analysis, is of
complexity *O(N*N)*. Using special implementation techniques it could
also be improved to *O(N*logN)*. But during the contest there was
somebody that had solved it with a linear algorithm, complexity
*O(N)*! This was surprising because even the contest organizers were
not aware of such a solution before the contest!

Below is my implementation of this solution of complexity *O(N)*:

#+BEGIN_EXPORT HTML
{% gist 5517391 %}
#+END_EXPORT
